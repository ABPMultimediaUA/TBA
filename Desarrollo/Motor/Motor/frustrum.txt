void TModel::beginDraw() {

	SceneManager &sm = SceneManager::i();
	glm::mat4 view = SceneManager::i().view;
	glm::mat4 projection = SceneManager::i().projection;
	glm::mat4 model= SceneManager::i().m_matrizActual;
	float frustum1[4];
	float frustum2[4];
	float frustum3[4];
	float frustum4[4];
	float frustum5[4];
	float frustum6[4];
	float t;
	
	/*
	ESTO PUEDE SERVIR PARA HACER QUE LA PISTOLA GIRE CON LA CAMARA YA QUE SE PROCESARIA ANTES LO DE LA PISTOLA QUE LO DE LA CAMARA
		int tam = SceneManager::i().pilaMatrices.size();
	for (int i = 0; i < tam; i++) {
		model = SceneManager::i().pilaMatrices.front()*model;
		SceneManager::i().pilaMatrices.pop_front();
	}
	//por si dependemos de la transformacion del padre, tenemos que multiplicar nuestra modelo por la de los padres que es la actual.
	model = actual * model;
	//seteamos la matrizActual a la del modelo por si acaso tiene algun hijo que necesita su matriz modelo
	SceneManager::i().m_matrizActual = model;
	
	*/


	glm::mat4 modelview = projection * view * model;
	glm::mat4 clip = projection * modelview;

	/* Extract the numbers for the RIGHT plane */
	frustum1[0] = clip[0][3] - clip[0][0];
	frustum1[1] = clip[1][3] - clip[1][0];
	frustum1[2] = clip[2][3] - clip[2][0];
	frustum1[3] = clip[3][3] - clip[3][0];

	/* Normalize the result */
	t = sqrt(frustum1[0] * frustum1[0] + frustum1[1] * frustum1[1] + frustum1[2] * frustum1[2]);
	frustum1[0] /= t;
	frustum1[1] /= t;
	frustum1[2] /= t;
	frustum1[3] /= t;

	/* Extract the numbers for the LEFT plane */
	frustum2[0] = clip[0][3] - clip[0][0];
	frustum2[1] = clip[1][3] - clip[1][0];
	frustum2[2] = clip[2][3] - clip[2][0];
	frustum2[3] = clip[3][3] - clip[3][0];

	/* Normalize the result */
	t = sqrt(frustum2[0] * frustum2[0] + frustum2[1] * frustum2[1] + frustum2[2] * frustum2[2]);
	frustum2[0] /= t;
	frustum2[1] /= t;
	frustum2[2] /= t;
	frustum2[3] /= t;

	/* Extract the BOTTOM plane */
	frustum3[0] = clip[0][3] + clip[0][1];
	frustum3[1] = clip[1][3] + clip[1][1];
	frustum3[2] = clip[2][3] + clip[2][1];
	frustum3[3] = clip[3][3] + clip[3][1];

	/* Normalize the result */
	t = sqrt(frustum3[0] * frustum3[0] + frustum3[1] * frustum3[1] + frustum3[2] * frustum3[2]);
	frustum3[0] /= t;
	frustum3[1] /= t;
	frustum3[2] /= t;
	frustum3[3] /= t;

	/* Extract the TOP plane */
	frustum4[0] = clip[0][3] + clip[0][1];
	frustum4[1] = clip[1][3] + clip[1][1];
	frustum4[2] = clip[2][3] + clip[2][1];
	frustum4[3] = clip[3][3] + clip[3][1];

	/* Normalize the result */
	t = sqrt(frustum4[0] * frustum4[0] + frustum4[1] * frustum4[1] + frustum4[2] * frustum4[2]);
	frustum4[0] /= t;
	frustum4[1] /= t;
	frustum4[2] /= t;
	frustum4[3] /= t;

	/* Extract the FAR plane */
	frustum5[0] = clip[0][3] - clip[0][2];
	frustum5[1] = clip[1][3] - clip[1][2];
	frustum5[2] = clip[2][3] - clip[2][2];
	frustum5[3] = clip[3][3] - clip[3][2];

	/* Normalize the result */
	t = sqrt(frustum5[0] * frustum5[0] + frustum5[1] * frustum5[1] + frustum5[2] * frustum5[2]);
	frustum5[0] /= t;
	frustum5[1] /= t;
	frustum5[2] /= t;
	frustum5[3] /= t;

	/* Extract the NEAR plane */
	frustum6[0] = clip[0][3] - clip[0][2];
	frustum6[1] = clip[1][3] - clip[1][2];
	frustum6[2] = clip[2][3] - clip[2][2];
	frustum6[3] = clip[3][3] - clip[3][2];

	/* Normalize the result */
	t = sqrt(frustum6[0] * frustum6[0] + frustum6[1] * frustum6[1] + frustum6[2] * frustum6[2]);
	frustum6[0] /= t;
	frustum6[1] /= t;
	frustum6[2] /= t;
	frustum6[3] /= t;



	// Activamos el shader que tenemos guardado
	shader->Use();
	// Le pasamos las matrices
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "frustrum1"), 1, GL_FALSE, frustum1);
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "frustrum2"), 1, GL_FALSE, frustum2);
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "frustrum3"), 1, GL_FALSE, frustum3);
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "frustrum4"), 1, GL_FALSE, frustum4);
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "frustrum5"), 1, GL_FALSE, frustum5);
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "frustrum6"), 1, GL_FALSE, frustum6);
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "modelview"), 1, GL_FALSE, glm::value_ptr(modelview));
	glUniformMatrix4fv(glGetUniformLocation(shader->Program, "model"), 1, GL_FALSE, glm::value_ptr(model));
	glUniform1i(glGetUniformLocation(shader->Program, "num_pointlight"), sm.vecPointLight.size());
	glUniform1i(glGetUniformLocation(shader->Program, "num_flashlight"), 1);
	//color
	glUniform3f(glGetUniformLocation(shader->Program, "objectColor"), m_r, m_g, m_b);
	//camaras
	glUniform3f(glGetUniformLocation(shader->Program, "viewPos"), SceneManager::i().activeCameraPos.getX(), SceneManager::i().activeCameraPos.getY(), SceneManager::i().activeCameraPos.getZ());
	
	//LUZ SOLAR
	if (sm.sunlight != nullptr) {
		sm.sunlight->pasarDatosAlShader(shader);
	}
	//POINTLIGHT
	for (int i = 0; i < SceneManager::i().vecPointLight.size(); i++) {
		sm.vecPointLight[i]->pasarDatosAlShader(shader, i);
	}
	//LUZ LINTERNA
	for (int i = 0; i < SceneManager::i().vecFlashLight.size(); i++) {
		sm.vecFlashLight[i]->pasarDatosAlShader(shader, i);
	}

	//Dibujamos los hijos (Si los hay)
	for (GLuint i = 0; i < this->meshes.size(); i++)
		this->meshes[i]->beginDraw();
}



//shader
uniform float frustum1[4];
uniform float frustum2[4];
uniform float frustum3[4];
uniform float frustum4[4];
uniform float frustum5[4];
uniform float frustum6[4];

int PointInFrustum( float x, float y, float z )
{

	if( frustum1[0] * x + frustum1[1] * y + frustum1[2] * z + frustum1[3] <= 0 )
         return 0;
	if( frustum2[0] * x + frustum2[1] * y + frustum2[2] * z + frustum2[3] <= 0 )
         return 0;
     if( frustum3[0] * x + frustum3[1] * y + frustum3[2] * z + frustum3[3] <= 0 )
         return 0;
     if( frustum4[0] * x + frustum4[1] * y + frustum4[2] * z + frustum4[3] <= 0 )
         return 0;
     if( frustum5[0] * x + frustum5[1] * y + frustum5[2] * z + frustum5[3] <= 0 )
         return 0;
     if( frustum6[0] * x + frustum6[1] * y + frustum6[2] * z + frustum6[3] <= 0 )
         return 0;
   return 1;
}